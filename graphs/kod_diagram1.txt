@startuml
hide empty members

class Product{
+products: empty
+id: int 
+name: char[]
+price: float
+__init__(id: int, name: char[], price: float)
}

class TooManyProductsFoundError{
+message: string
+ __init__(self, val: float)
}



abstract class Serwer{
+n_max_returned_entries: int
+products_in_list(): List[Product]
+get_entries()
+{abstract} get_all_products()
}


class ListServer{
+n_max_returned_entries: int
+products: : List[Product]
+__init__(self, product_list: List[Product])
+products_in_list(self): List[Product]
+get_entries(self, n_letters: int): List[Product]
+get_all_products()
}

class MapServer{
+n_max_returned_entries: int
+products: Dict{str: Product}
+__init__(self, product_list: List[Product])
+products_in_list(self): List[Product]
+get_entries(self, n_letters: int): List[Product]
+get_all_products()
}

class Client{
+ __init__(self, serwer: Serwer)
+ get_total_price(self, n_letters: Optional[int]): float
}

Client o-- Serwer 

Serwer <|-- MapServer
Serwer <|-- ListServer 
MapServer  *--  Product  
ListServer *--  Product 
MapServer ..> TooManyProductsFoundError
ListServer ..> TooManyProductsFoundError
Product <.. TooManyProductsFoundError: <<throws>> 


@end uml
@enduml